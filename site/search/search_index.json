{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udc4b Hello!","text":""},{"location":"#welcome-to-asic-interview-website","title":"Welcome to asic-interview website! \ud83d\ude80","text":"<p>The field of Very Large Scale Integration (VLSI) plays a crucial role in modern semiconductor technology, shaping the design of chips used in consumer electronics, computing, and communication systems. With companies constantly pushing the boundaries of performance, power efficiency, and cost, there is a growing demand for skilled VLSI engineers. However, securing a role in this competitive field requires thorough preparation, not just in technical concepts but also in problem-solving and communication skills.</p>"},{"location":"#why-this-website","title":"\ud83d\udca1 Why This Website?","text":"<p>I decided to create this website because I have seen talented engineers struggle during interviews\u2014not due to a lack of knowledge, but because they were unprepared for the format, the depth of questioning, and the mental pressure that comes with technical interviews. Many candidates feel nervous or overwhelmed in their first few interviews. I have been there myself. </p> <p>The long hours of technical discussions, the stress of solving problems on the spot, and the challenge of explaining complex ideas concisely can be mentally exhausting. But like anything else, practice builds confidence. Over time, I learned how to approach these interviews strategically, stay composed, and articulate my thoughts effectively.</p>"},{"location":"#what-you-will-find-here","title":"\ud83c\udfaf What You Will Find Here","text":"<p>Throughout my career, I have encountered a wide range of interview questions\u2014some highly practical and industry-focused, others purely theoretical, and a few that seemed designed just to test how candidates handle pressure rather than their actual engineering skills. This website aims to prepare you for all types of questions, including:</p> <ul> <li>Practical, real-world VLSI challenges that test how well you can apply knowledge to actual design problems.</li> <li>Theoretical and textbook-style questions that focus on fundamental concepts.</li> <li>Tricky and uncommon problems that might appear in some interviews but are rarely encountered in actual chip design work.</li> <li>Behavioral and problem-solving questions that assess your approach to debugging, teamwork, and decision-making.</li> </ul>"},{"location":"#website-structure","title":"\ud83c\udfd7\ufe0f Website Structure","text":"<p>This website is structured into multiple sections, covering essential topics such as:</p> <ul> <li>RTL coding </li> <li>Logic design </li> <li>Low-power principles </li> <li>Clocking and reset architectures </li> <li>Clock domain crossings (CDC) </li> <li>Debugging methodologies </li> <li>Logical reasoning </li> </ul> <p>You can navigate through the chapters based on your interests or the specific areas you need to improve.</p>"},{"location":"#the-goal","title":"\ud83d\ude80 The Goal","text":"<p>My goal is not just to help you answer questions correctly but to equip you with the right mindset and approach to tackle interviews with confidence. By the time you finish this website, you will:</p> <p>\u2705 Have a solid grasp of VLSI interview topics \u2705 Be better prepared to handle interview pressure \u2705 Develop the adaptability needed to succeed in the ever-evolving semiconductor industry  </p> <p>Stay focused, keep learning, and approach each interview as an opportunity to grow\u2014your perseverance will pay off. \ud83d\udcaa</p>"},{"location":"#how-to-use-this-site","title":"\ud83d\udd0d How to Use This Site","text":"<ul> <li>Navigate using the top menu or search bar.</li> <li>Click on a topic to explore interview questions and answers.</li> </ul> <p>Powered by MkDocs &amp; Material for MkDocs.</p>"},{"location":"questions/dft/","title":"DFT (Design for Test) Interview Questions","text":""},{"location":"questions/dft/#1-what-is-design-for-testability-dft","title":"1. What is Design for Testability (DFT)?","text":"<p>Design for Testability (DFT) refers to the practice of adding specific features to hardware designs to make them easier to test after manufacturing. DFT techniques help in detecting manufacturing defects and ensure the functionality of the device. Common DFT methods include scan insertion, built-in self-test (BIST), and boundary scan.</p>"},{"location":"questions/dft/#2-what-is-scan-insertion-and-why-is-it-needed","title":"2. What is scan insertion, and why is it needed?","text":"<p>Scan insertion is a DFT technique where flip-flops in a design are connected in a serial shift register configuration, known as a scan chain. This allows for easier control and observation of internal states during testing. Scan insertion is needed to: - Improve test coverage. - Simplify the testing process. - Detect and diagnose faults effectively.</p>"},{"location":"questions/dft/#3-what-are-scan-design-rule-checks-drcs-and-how-do-you-resolve-them","title":"3. What are scan Design Rule Checks (DRCs), and how do you resolve them?","text":"<p>Scan Design Rule Checks (DRCs) are a set of guidelines to ensure the proper implementation of scan chains. Common scan DRC violations include: - Combinational loops: Resolved by breaking the loop with flip-flops. - Asynchronous set/reset: Replaced with synchronous controls. - Clock domain crossing without synchronization: Addressed by adding synchronizers.</p>"},{"location":"questions/dft/#4-explain-the-need-for-scan-compression-and-the-basics-of-embedded-deterministic-test-edt-architecture","title":"4. Explain the need for scan compression and the basics of Embedded Deterministic Test (EDT) architecture.","text":"<p>Scan compression reduces the amount of test data and time required by compressing the scan vectors. Embedded Deterministic Test (EDT) architecture integrates decompression and compression logic on-chip to: - Minimize test data volume. - Reduce test application time. - Maintain high fault coverage.</p>"},{"location":"questions/dft/#5-what-is-automatic-test-pattern-generation-atpg-and-why-is-it-important","title":"5. What is Automatic Test Pattern Generation (ATPG), and why is it important?","text":"<p>Automatic Test Pattern Generation (ATPG) is a process that automatically creates test vectors to detect faults in a digital circuit. ATPG is important because it: - Ensures high fault coverage. - Reduces the time and effort in generating test patterns. - Identifies hard-to-detect faults.</p>"},{"location":"questions/dft/#6-describe-the-different-fault-models-used-in-atpg","title":"6. Describe the different fault models used in ATPG.","text":"<p>Common fault models include: - Stuck-At Fault (SAF): Assumes a signal is permanently stuck at '0' or '1'. - Transition Delay Fault (TDF): Models defects causing slow signal transitions. - Path Delay Fault: Focuses on delays along specific paths. - Bridging Fault: Represents shorts between signal lines.</p>"},{"location":"questions/dft/#7-what-is-the-purpose-of-on-chip-clock-controller-occ-in-dft","title":"7. What is the purpose of On-Chip Clock Controller (OCC) in DFT?","text":"<p>The On-Chip Clock Controller (OCC) manages clock signals during test modes. It allows: - Control over clock gating. - Generation of test-specific clock frequencies. - Safe switching between functional and test clocks.</p>"},{"location":"questions/dft/#8-how-do-you-perform-coverage-analysis-and-improvement-in-atpg","title":"8. How do you perform coverage analysis and improvement in ATPG?","text":"<p>Coverage analysis involves evaluating the percentage of detectable faults using generated test patterns. To improve coverage: - Analyze undetected faults. - Enhance test patterns targeting specific faults. - Modify the design to make certain areas more testable.</p>"},{"location":"questions/dft/#9-what-is-the-role-of-simulations-in-dft-and-how-do-you-debug-simulation-mismatches","title":"9. What is the role of simulations in DFT, and how do you debug simulation mismatches?","text":"<p>Simulations validate the functionality of test patterns and the design's response. To debug mismatches: - Compare simulation outputs with expected results. - Trace discrepancies to specific patterns or design blocks. - Investigate potential issues like incorrect scan chain connections or timing violations.</p>"},{"location":"questions/dft/#10-explain-jtag-and-its-significance-in-dft","title":"10. Explain JTAG and its significance in DFT.","text":"<p>Joint Test Action Group (JTAG) is a standard for testing and debugging integrated circuits via a serial interface. Its significance includes: - Providing a standardized testing interface. - Enabling boundary scan for testing interconnections. - Facilitating in-system programming and debugging.</p>"},{"location":"questions/dft/#11-what-is-the-tap-architecture-in-jtag","title":"11. What is the TAP architecture in JTAG?","text":"<p>The Test Access Port (TAP) architecture in JTAG includes: - TAP Controller: Manages test operations via a state machine. - Instruction Register (IR): Holds instructions for test operations. - Data Registers (DR): Include boundary scan register, bypass register, and others for specific tests.</p>"},{"location":"questions/dft/#12-describe-the-boundary-scan-technique","title":"12. Describe the Boundary Scan technique.","text":"<p>Boundary Scan involves adding a shift-register stage (boundary scan cell) to each I/O pin of a device. This allows: - Testing of interconnections between devices on a board. - Detection of faults like opens and shorts without physical probing.</p>"},{"location":"questions/dft/#13-what-is-ijtag-and-how-does-it-differ-from-jtag","title":"13. What is IJTAG, and how does it differ from JTAG?","text":"<p>Internal JTAG (IJTAG) extends the JTAG standard to access and control embedded instruments within an integrated circuit. Unlike traditional JTAG, which focuses on testing interconnections, IJTAG provides: - Access to internal test features. - Enhanced debugging capabilities. - Standardized control over embedded instruments.</p>"},{"location":"questions/dft/#14-how-are-memory-faults-tested-and-what-algorithms-are-used","title":"14. How are memory faults tested, and what algorithms are used?","text":"<p>Memory faults are tested using algorithms designed to detect specific fault types. Common algorithms include: - March Tests: Detect address and data line faults. - Checkerboard Tests: Identify pattern-sensitive faults. - Walking 1s and 0s: Detect stuck-at faults.</p>"},{"location":"questions/dft/#15-what-is-memory-built-in-self-test-mbist-and-how-is-it-implemented","title":"15. What is Memory Built-In Self-Test (MBIST), and how is it implemented?","text":"<p>Memory Built-In Self-Test (MBIST) is an embedded test mechanism for memories. It is implemented by integrating test logic that can: - Generate test patterns. - Apply them to the memory. - Compare the output with expected results. - Report faults without external test equipment.</p>"},{"location":"questions/dft/#16-explain-the-concept-of-hierarchical-scan-and-scan-wrappers","title":"16. Explain the concept of Hierarchical Scan and Scan Wrappers.","text":"<p>Hierarchical Scan involves structuring scan chains in a hierarchical manner, allowing testing of individual modules or cores independently. Scan Wrappers are added around modules to: - Isolate them during testing. - Enable modular testing and debugging. - Simplify the integration of IP cores with existing DFT infrastructure.</p>"},{"location":"questions/digital/","title":"Digital Design Interview Questions","text":"<ul> <li>Logic Design Questions</li> <li>Clocking, Clock Dividers, and Reset Questions</li> <li>Clock Domain Crossing (CDC) Questions</li> <li>Power-Related Questions</li> <li>Digital Filter Questions (FIR, IIR and CIC)</li> </ul>"},{"location":"questions/mixed_signal/","title":"Mixed-Signal Design Interview Questions","text":""},{"location":"questions/mixed_signal/#1-what-are-the-key-challenges-in-mixed-signal-verification","title":"1. What are the key challenges in mixed-signal verification?","text":"<ul> <li>Analog-digital interface modeling</li> <li>Noise coupling effects</li> <li>Cross-domain synchronization</li> </ul>"},{"location":"questions/mixed_signal/#2-how-does-an-adc-work","title":"2. How does an ADC work?","text":"<p>An Analog-to-Digital Converter (ADC) samples an analog signal and converts it into a digital word using quantization.</p>"},{"location":"questions/mixed_signal/#3-what-are-common-adc-architectures","title":"3. What are common ADC architectures?","text":"<ul> <li>SAR ADC (Successive Approximation Register)</li> <li>Pipeline ADC</li> <li>Sigma-Delta ADC</li> </ul>"},{"location":"questions/mixed_signal/#4-what-is-phase-noise-in-plls","title":"4. What is phase noise in PLLs?","text":"<p>Phase noise is the jitter in frequency output of a PLL caused by noise sources.</p>"},{"location":"questions/mixed_signal/#5-what-is-charge-pump-leakage","title":"5. What is charge pump leakage?","text":"<p>Leakage in charge pumps causes voltage drift, affecting PLL stability.</p>"},{"location":"questions/physical/","title":"Physical Design (PD) Interview Questions","text":""},{"location":"questions/physical/#1-what-are-the-key-steps-in-asic-physical-design","title":"1. What are the key steps in ASIC Physical Design?","text":"<ul> <li>Floorplanning </li> <li>Power Planning </li> <li>Placement &amp; CTS (Clock Tree Synthesis) </li> <li>Routing </li> <li>Timing Closure &amp; Signoff</li> </ul>"},{"location":"questions/physical/#2-what-is-clock-skew-and-how-is-it-managed","title":"2. What is clock skew and how is it managed?","text":"<p>Clock skew is the difference in clock arrival times at different flip-flops. Managed using: - Clock Tree Synthesis (CTS) - Buffering and Load Balancing - Useful Skew Adjustment</p>"},{"location":"questions/physical/#3-what-is-ocv-on-chip-variation-and-why-does-it-matter","title":"3. What is OCV (On-Chip Variation) and why does it matter?","text":"<p>OCV accounts for process variations across the die, affecting timing closure.</p>"},{"location":"questions/physical/#4-what-is-ir-drop-and-how-is-it-reduced","title":"4. What is IR Drop and how is it reduced?","text":"<p>IR Drop is voltage loss due to resistance in power rails. Reduced by: - Adding Power Straps - Using Proper Decap Cells - Optimizing Routing Layers</p>"},{"location":"questions/protocol/","title":"AXI Interview Questions and Answers","text":""},{"location":"questions/protocol/#1-what-are-the-key-differences-between-axi3-and-axi4","title":"1. What are the key differences between AXI3 and AXI4?","text":"<p>AXI4 introduces key improvements over AXI3: - AXI4 removes write interleaving, making write data ordering simpler. - AXI4 introduces burst transactions up to 256 beats, while AXI3 allows only 16 beats. - AXI4 removes locked transactions, which were present in AXI3. - AXI4 supports a simplified, more efficient interface for high-speed transfers.</p>"},{"location":"questions/protocol/#2-how-do-the-axi-read-and-write-channels-work","title":"2. How do the AXI read and write channels work?","text":"<p>AXI has independent read and write channels: - Write Transaction: Uses <code>AW</code> (address write), <code>W</code> (write data), and <code>B</code> (write response) channels. - Read Transaction: Uses <code>AR</code> (address read) and <code>R</code> (read data) channels.</p> <p>Each transaction is handshake-based using <code>VALID</code> and <code>READY</code> signals.</p>"},{"location":"questions/protocol/#3-explain-the-purpose-of-awvalid-wvalid-bvalid-arvalid-and-rvalid-signals-in-axi","title":"3. Explain the purpose of AWVALID, WVALID, BVALID, ARVALID, and RVALID signals in AXI.","text":"<ul> <li>AWVALID: Indicates a valid write address.</li> <li>WVALID: Indicates valid write data.</li> <li>BVALID: Indicates a valid write response.</li> <li>ARVALID: Indicates a valid read address.</li> <li>RVALID: Indicates valid read data.</li> </ul>"},{"location":"questions/protocol/#4-what-are-the-different-response-types-in-axi-and-what-do-they-indicate","title":"4. What are the different response types in AXI, and what do they indicate?","text":"<ul> <li><code>OKAY (00)</code>: Successful normal access.</li> <li><code>EXOKAY (01)</code>: Exclusive access successful (for locked transactions in AXI3).</li> <li><code>SLVERR (10)</code>: Slave error occurred.</li> <li><code>DECERR (11)</code>: Decode error, meaning an invalid address was accessed.</li> </ul>"},{"location":"questions/protocol/#5-how-does-axi-ensure-data-integrity-in-transfers","title":"5. How does AXI ensure data integrity in transfers?","text":"<ul> <li>AXI ensures integrity via handshaking (<code>VALID</code> and <code>READY</code> signals).</li> <li>It supports ECC (Error Correction Code) in high-reliability applications.</li> <li>It uses response signals (<code>BRESP</code>, <code>RRESP</code>) to indicate errors.</li> </ul>"},{"location":"questions/protocol/#6-what-is-the-significance-of-awready-wready-bready-arready-and-rready-signals","title":"6. What is the significance of AWREADY, WREADY, BREADY, ARREADY, and RREADY signals?","text":"<ul> <li>AWREADY: Slave is ready to accept the write address.</li> <li>WREADY: Slave is ready to accept the write data.</li> <li>BREADY: Master is ready to accept the write response.</li> <li>ARREADY: Slave is ready to accept the read address.</li> <li>RREADY: Master is ready to accept the read data.</li> </ul>"},{"location":"questions/protocol/#7-how-does-axi-handle-out-of-order-transactions","title":"7. How does AXI handle out-of-order transactions?","text":"<ul> <li>AXI supports out-of-order transactions using unique transaction IDs (<code>AxID</code>).</li> <li>The slave can return responses in a different order than received but must ensure responses for the same ID maintain order.</li> <li>Reordering logic in interconnects allows efficient pipelining.</li> </ul>"},{"location":"questions/protocol/#8-what-are-axi-qos-quality-of-service-signals-and-how-do-they-impact-system-performance","title":"8. What are AXI QoS (Quality of Service) signals, and how do they impact system performance?","text":"<ul> <li><code>AxQOS</code> (4-bit signal) allows assigning priority to transactions.</li> <li>Higher priority transactions can be serviced first in congestion scenarios.</li> <li>Useful for real-time applications like video streaming and networking.</li> </ul>"},{"location":"questions/protocol/#9-how-does-axi-achieve-pipelined-transactions","title":"9. How does AXI achieve pipelined transactions?","text":"<ul> <li>AXI decouples the address, data, and response phases using independent channels.</li> <li>This allows multiple transactions to be active simultaneously, improving bandwidth utilization.</li> </ul>"},{"location":"questions/protocol/#10-how-does-axi-manage-back-to-back-transactions","title":"10. How does AXI manage back-to-back transactions?","text":"<ul> <li>The master can issue back-to-back transactions without waiting for responses.</li> <li>Out-of-order transactions allow parallel processing, improving efficiency.</li> </ul>"},{"location":"questions/protocol/#11-how-does-an-axi-interconnect-work","title":"11. How does an AXI interconnect work?","text":"<ul> <li>An AXI interconnect routes transactions between multiple masters and slaves.</li> <li>It handles arbitration, protocol conversion, and clock domain crossing.</li> </ul>"},{"location":"questions/protocol/#12-what-happens-if-two-axi-masters-try-to-access-the-same-axi-slave-simultaneously","title":"12. What happens if two AXI masters try to access the same AXI slave simultaneously?","text":"<ul> <li>The interconnect arbitrates between masters using fairness or priority-based schemes.</li> </ul>"},{"location":"questions/protocol/#13-explain-the-different-arbitration-schemes-used-in-axi","title":"13. Explain the different arbitration schemes used in AXI.","text":"<ul> <li>Round-robin: Equal priority among masters.</li> <li>Fixed priority: High-priority master always wins.</li> <li>Dynamic arbitration: Adjusts priority based on real-time traffic.</li> </ul>"},{"location":"questions/protocol/#14-how-would-you-design-an-axi-interconnect-for-multiple-masters-and-slaves","title":"14. How would you design an AXI interconnect for multiple masters and slaves?","text":"<ul> <li>Use an AXI crossbar switch to allow concurrent master-slave transactions.</li> <li>Implement arbitration to resolve conflicts.</li> </ul>"},{"location":"questions/protocol/#15-what-are-the-advantages-of-using-an-axi-crossbar","title":"15. What are the advantages of using an AXI crossbar?","text":"<ul> <li>Allows simultaneous multiple transactions.</li> <li>Reduces contention compared to shared-bus architectures.</li> </ul>"},{"location":"questions/protocol/#16-what-are-the-different-types-of-axi-bursts","title":"16. What are the different types of AXI bursts?","text":"<ul> <li>FIXED: All addresses are the same.</li> <li>INCR: Sequentially increasing addresses.</li> <li>WRAP: Wraps around on boundary crossing.</li> </ul>"},{"location":"questions/protocol/#17-how-does-axi-handle-misaligned-data-accesses","title":"17. How does AXI handle misaligned data accesses?","text":"<ul> <li>Uses <code>WSTRB</code> signals to enable specific bytes in a word.</li> </ul>"},{"location":"questions/protocol/#18-what-happens-if-an-axi-burst-crosses-a-4kb-boundary","title":"18. What happens if an AXI burst crosses a 4KB boundary?","text":"<ul> <li>AXI does not allow bursts to cross 4KB boundaries to prevent address wrap issues.</li> </ul>"},{"location":"questions/protocol/#19-how-is-the-axlen-signal-used-in-burst-transactions","title":"19. How is the AxLEN signal used in burst transactions?","text":"<ul> <li>Specifies the number of data beats (0-255 in AXI4).</li> </ul>"},{"location":"questions/protocol/#20-how-does-axi-handle-write-strobes-wstrb","title":"20. How does AXI handle write strobes (WSTRB)?","text":"<ul> <li>Specifies which bytes are valid in a write transaction.</li> </ul>"},{"location":"questions/protocol/#21-how-does-axi-handle-clock-domain-crossing","title":"21. How does AXI handle clock domain crossing?","text":"<ul> <li>Uses synchronizers, FIFOs, or asynchronous bridges.</li> </ul>"},{"location":"questions/protocol/#22-what-is-an-axi-register-slice-and-when-should-it-be-used","title":"22. What is an AXI register slice, and when should it be used?","text":"<ul> <li>Adds pipeline registers to improve timing closure.</li> </ul>"},{"location":"questions/protocol/#23-how-does-axi-handle-reset-and-initialization","title":"23. How does AXI handle reset and initialization?","text":"<ul> <li>Uses <code>ARESETn</code> to reset all channels synchronously.</li> </ul>"},{"location":"questions/protocol/#24-how-would-you-design-an-axi-bridge-between-different-clock-domains","title":"24. How would you design an AXI bridge between different clock domains?","text":"<ul> <li>Use FIFO-based CDC techniques.</li> </ul>"},{"location":"questions/protocol/#25-what-are-the-challenges-in-designing-an-axi-to-apb-or-axi-to-ahb-bridge","title":"25. What are the challenges in designing an AXI-to-APB or AXI-to-AHB bridge?","text":"<ul> <li>Handling protocol differences in timing, burst types, and response mechanisms.</li> </ul>"},{"location":"questions/synthesis/","title":"Synthesis &amp; Static Timing Analysis (STA) Interview Questions","text":""},{"location":"questions/synthesis/#1-what-is-the-difference-between-rtl-and-netlist","title":"1. What is the difference between RTL and netlist?","text":"<ul> <li>RTL is high-level, written in Verilog/VHDL.  </li> <li>Netlist is a gate-level representation after synthesis.</li> </ul>"},{"location":"questions/synthesis/#2-what-are-false-paths-and-multi-cycle-paths","title":"2. What are false paths and multi-cycle paths?","text":"<ul> <li>False Path: A timing path that never gets activated in real operation.</li> <li>Multi-Cycle Path (MCP): A path that has more than one clock cycle to complete.</li> </ul>"},{"location":"questions/synthesis/#3-what-are-setup-and-hold-time-violations","title":"3. What are setup and hold time violations?","text":"<ul> <li>Setup Violation: Data is not stable before the clock edge.</li> <li>Hold Violation: Data changes too early after the clock edge.</li> </ul>"},{"location":"questions/synthesis/#4-what-is-clock-gating-and-why-is-it-used","title":"4. What is clock gating and why is it used?","text":"<p>Clock gating reduces dynamic power consumption by disabling the clock when logic is inactive.</p>"},{"location":"questions/synthesis/#5-what-is-the-role-of-primetime-in-asic-design","title":"5. What is the role of PrimeTime in ASIC design?","text":"<p>PrimeTime (PT) is a timing analysis tool used for: - Setup/Hold Analysis - Clock Tree Analysis - Path Delay Debugging</p>"},{"location":"questions/verification/","title":"ASIC Verification Interview Questions","text":""},{"location":"questions/verification/#1-what-is-constrained-random-verification","title":"1. What is constrained random verification?","text":"<p>Constrained random verification (CRV) is a UVM methodology where input vectors are randomly generated under constraints to improve test coverage.</p>"},{"location":"questions/verification/#2-what-is-functional-coverage-and-how-is-it-different-from-code-coverage","title":"2. What is functional coverage, and how is it different from code coverage?","text":"<ul> <li>Functional coverage ensures that all features and scenarios are tested.  </li> <li>Code coverage checks if all statements, branches, and FSM states in RTL were exercised.</li> </ul>"},{"location":"questions/verification/#3-what-are-assertions-in-verification","title":"3. What are assertions in verification?","text":"<p>Assertions are properties written in SVA (SystemVerilog Assertions) to monitor and validate signal behavior during simulation.</p>"},{"location":"questions/verification/#4-what-is-a-transaction-in-uvm","title":"4. What is a transaction in UVM?","text":"<p>A transaction is a data object that captures signal transfers, representing a single event in stimulus-response modeling.</p>"},{"location":"questions/verification/#5-how-do-you-debug-a-failing-test-in-simulation","title":"5. How do you debug a failing test in simulation?","text":"<ol> <li>Check waveform (VCD, FSDB)</li> <li>Analyze log files for assertion failures</li> <li>Use UVM debug tools (uvm_report, backtrace)</li> <li>Enable finer-grained print logs</li> </ol>"},{"location":"questions/digital/clocking/","title":"Clock Divider Interview Questions and Answers","text":""},{"location":"questions/digital/clocking/#1-what-is-a-clock-divider-and-why-is-it-used-in-rtl-design","title":"1. What is a clock divider, and why is it used in RTL design?","text":"<p>A clock divider is a circuit that reduces the frequency of an input clock signal by a specific factor. It is commonly used in RTL design for: - Generating lower-frequency clocks for different components. - Reducing power consumption by lowering switching activity. - Synchronizing signals operating at different clock domains. - Implementing baud rate generators in UARTs, PWM circuits, and timers.</p>"},{"location":"questions/digital/clocking/#2-how-do-you-implement-a-clock-divider-by-2-using-verilog","title":"2. How do you implement a clock divider by 2 using Verilog?","text":"<p>A clock divider by 2 can be implemented using a toggling flip-flop on every clock edge.</p> <p>Verilog Code: <pre><code>always @(posedge clk or negedge rst_n) begin  \n    if (!rst_n)  \n        clk_div2 &lt;= 0;  \n    else  \n        clk_div2 &lt;= ~clk_div2;  \nend  \n</code></pre> This implementation toggles the output (<code>clk_div2</code>) at half the frequency of the input clock.</p>"},{"location":"questions/digital/clocking/#3-how-do-you-implement-a-clock-divider-by-an-odd-number","title":"3. How do you implement a clock divider by an odd number?","text":"<p>Dividing the clock by an odd number requires a counter-based approach and an edge detector.</p> <p>Verilog Code: <pre><code>always @(posedge clk or negedge rst_n) begin  \n    if (!rst_n)  \n        count &lt;= 0;  \n    else if (count == DIV_FACTOR-1)  \n        count &lt;= 0;  \n    else  \n        count &lt;= count + 1;  \nend  \n\nassign clk_out = (count &lt; DIV_FACTOR/2) ? 1'b1 : 1'b0;  \n</code></pre></p> <p>This ensures a correct frequency division even when the divisor is odd.</p>"},{"location":"questions/digital/clocking/#4-what-is-the-difference-between-a-clock-divider-using-counters-and-a-clock-divider-using-toggling-flip-flops","title":"4. What is the difference between a clock divider using counters and a clock divider using toggling flip-flops?","text":"Clock Divider Type Implementation Pros Cons Toggle Flip-Flop Uses a T-flip-flop that toggles on every clock cycle. Simple, power-efficient, and glitch-free. Limited to dividing by powers of 2. Counter-Based Uses a counter to track clock cycles and toggle output when a count is reached. Can divide by any integer, including odd numbers. More complex, higher power consumption."},{"location":"questions/digital/clocking/#5-how-do-you-ensure-glitch-free-clock-division","title":"5. How do you ensure glitch-free clock division?","text":"<ul> <li>Use synchronous counters instead of asynchronous logic.</li> <li>Avoid gating the clock directly\u2014use enable signals instead.</li> <li>Implement flip-flop-based clock dividers rather than combinational circuits.</li> <li>Use synchronized resets to avoid metastability at power-up.</li> </ul>"},{"location":"questions/digital/clocking/#6-what-is-the-impact-of-using-a-clock-divider-on-timing-closure","title":"6. What is the impact of using a clock divider on timing closure?","text":"<ul> <li>Longer Data Paths: Clock dividers introduce timing dependencies between different clock domains.</li> <li>Increased Skew &amp; Jitter: If the divided clock is not perfectly aligned, it may cause setup/hold violations.</li> <li>Synchronization Issues: Requires proper CDC (Clock Domain Crossing) techniques to avoid metastability.</li> <li>Multicycle Paths: Can introduce multicycle paths, which need to be explicitly constrained in STA.</li> </ul>"},{"location":"questions/digital/clocking/#7-how-do-you-handle-duty-cycle-correction-in-clock-dividers","title":"7. How do you handle duty cycle correction in clock dividers?","text":"<ul> <li>Even Divisors: Toggle-based clock dividers naturally generate a 50% duty cycle.</li> <li>Odd Divisors: Require additional logic to balance high/low times.</li> <li>Duty Cycle Correction Circuit:</li> </ul> <pre><code>always @(posedge clk or negedge rst_n) begin  \n    if (!rst_n)  \n        clk_out &lt;= 0;  \n    else if (count == (DIV_FACTOR/2))  \n        clk_out &lt;= ~clk_out;  \nend  \n</code></pre> <p>By adjusting when the clock toggles, the duty cycle is corrected.</p>"},{"location":"questions/digital/clocking/#8-how-do-you-implement-a-fractional-clock-divider-in-rtl","title":"8. How do you implement a fractional clock divider in RTL?","text":"<p>A fractional clock divider allows non-integer division by alternating between different clock periods.</p> <p>Verilog Code: <pre><code>always @(posedge clk or negedge rst_n) begin  \n    if (!rst_n)  \n        count &lt;= 0;  \n    else if (count &gt;= N)  \n        count &lt;= 0;  \n    else  \n        count &lt;= count + 1;  \nend  \n\nassign clk_out = (count &lt; M) ? 1'b1 : 1'b0;  \n</code></pre></p> <p>Where: - <code>N</code> is the full clock cycle count. - <code>M</code> is the high-time portion of the cycle.</p> <p>This technique effectively generates a non-integer division of the clock.</p>"},{"location":"questions/digital/clocking/#9-how-do-you-verify-a-clock-divider-circuit-in-simulation","title":"9. How do you verify a clock divider circuit in simulation?","text":"<ul> <li>Check Output Frequency: Simulate with different clock inputs and verify the divided clock output.</li> <li>Verify Duty Cycle: Measure <code>HIGH</code> and <code>LOW</code> times to ensure correct duty cycle.</li> <li>Test Edge Transitions: Ensure output transitions only on expected clock edges.</li> <li>Metastability Testing: Simulate with deliberate small timing violations to test robustness.</li> <li>Reset Behavior: Verify reset properly initializes the divider state.</li> </ul> <p>Example Simulation Waveform: - Input Clock: <code>100 MHz</code> - Clock Divider by 3 Output: <code>33.3 MHz</code> - Verify rising and falling edges match expected behavior.</p>"},{"location":"questions/digital/clocking/#10-what-is-the-effect-of-clock-division-on-metastability","title":"10. What is the effect of clock division on metastability?","text":"<ul> <li>Reduced Transition Rate: Slower clocks have fewer transitions, reducing metastability risks.</li> <li>Clock Domain Crossing Risks: If divided clocks interact with different domains, synchronizers are required.</li> <li>Longer Setup &amp; Hold Time: Since slower clocks operate with longer cycles, timing constraints must be met.</li> </ul> <p>To prevent metastability, use double-register synchronizers when transferring signals across divided clocks:</p> <p>Verilog Code: <pre><code>always @(posedge clk_div or negedge rst_n) begin  \n    if (!rst_n) begin  \n        sync_reg1 &lt;= 0;  \n        sync_reg2 &lt;= 0;  \n    end else begin  \n        sync_reg1 &lt;= async_signal;  \n        sync_reg2 &lt;= sync_reg1;  \n    end  \nend  \n</code></pre> By using two flip-flops, metastability effects are greatly reduced.</p>"},{"location":"questions/digital/digital-filters/","title":"Digital Filter Design Interview Questions","text":"<p>These are some important interview questions on digital filter design, focusing on FIR, IIR, and CIC filters, with a hardware perspective, including coefficients, responses, cutoffs, rolloff, phase, poles, and zeros.</p>"},{"location":"questions/digital/digital-filters/#fundamentals-of-digital-filters","title":"Fundamentals of Digital Filters","text":""},{"location":"questions/digital/digital-filters/#1-what-are-the-fundamental-differences-between-fir-and-iir-filters-in-terms-of-hardware-implementation","title":"1. What are the fundamental differences between FIR and IIR filters in terms of hardware implementation?","text":"<ul> <li>FIR (Finite Impulse Response): Non-recursive, requiring only multipliers, adders, and delay elements. Simpler and predictable hardware.</li> <li>IIR (Infinite Impulse Response): Recursive, requiring feedback paths, making hardware more complex but more efficient.</li> <li>Hardware Considerations: FIR is preferred when linear phase is required and stability is critical. IIR is more area-efficient for sharp cutoff filters.</li> </ul>"},{"location":"questions/digital/digital-filters/#2-how-are-filter-coefficients-determined-for-fir-and-iir-filters","title":"2. How are filter coefficients determined for FIR and IIR filters?","text":"<ul> <li>FIR: Windowing methods, frequency sampling, and Parks-McClellan algorithms.</li> <li>IIR: Butterworth, Chebyshev, and Elliptic approximations, often derived from analog filter prototypes.</li> </ul>"},{"location":"questions/digital/digital-filters/#3-explain-the-significance-of-cutoff-frequency-and-rolloff-in-filter-design","title":"3. Explain the significance of cutoff frequency and rolloff in filter design.","text":"<ul> <li>Cutoff Frequency: The frequency where the filter transitions from passband to stopband.</li> <li>Rolloff: The rate at which attenuation increases beyond the cutoff frequency (measured in dB/decade or dB/octave).</li> <li>Impact: Determines the filter\u2019s selectivity and sharpness of transition.</li> </ul>"},{"location":"questions/digital/digital-filters/#4-what-is-the-impact-of-filter-order-on-the-filters-frequency-response","title":"4. What is the impact of filter order on the filter\u2019s frequency response?","text":"<ul> <li>Higher order FIR filters provide sharper cutoffs and better stopband attenuation.</li> <li>Higher order IIR filters improve selectivity but increase complexity and risk instability.</li> <li>Trade-offs: Increased order requires more hardware resources but improves performance.</li> </ul>"},{"location":"questions/digital/digital-filters/#5-describe-the-linear-phase-characteristic-of-fir-filters-and-its-importance-in-hardware-applications","title":"5. Describe the linear phase characteristic of FIR filters and its importance in hardware applications.","text":"<ul> <li>Linear Phase: All frequency components are delayed equally, preserving signal shape.</li> <li>Importance: Essential in applications where phase distortion is unacceptable (audio, communications).</li> <li>Hardware Efficiency: Reduces signal processing complexity.</li> </ul>"},{"location":"questions/digital/digital-filters/#6-how-do-poles-and-zeros-affect-the-frequency-response-of-iir-filters","title":"6. How do poles and zeros affect the frequency response of IIR filters?","text":"<ul> <li>Poles: Define stability and resonance; poles near the unit circle amplify frequencies.</li> <li>Zeros: Define frequency attenuation; zeros on the unit circle completely block certain frequencies.</li> </ul>"},{"location":"questions/digital/digital-filters/#digital-filter-design-and-implementation","title":"Digital Filter Design and Implementation","text":""},{"location":"questions/digital/digital-filters/#7-what-are-the-advantages-and-disadvantages-of-iir-filters-compared-to-fir-filters-in-hardware-design","title":"7. What are the advantages and disadvantages of IIR filters compared to FIR filters in hardware design?","text":"<p>Advantages: - Achieves sharp cutoff with a lower order, reducing hardware resource usage. - Requires fewer coefficients.</p> <p>Disadvantages: - Nonlinear phase response may distort signals. - Recursive feedback introduces stability concerns.</p>"},{"location":"questions/digital/digital-filters/#8-explain-the-concept-of-windowing-in-fir-filter-design-and-its-effect-on-the-frequency-response","title":"8. Explain the concept of windowing in FIR filter design and its effect on the frequency response.","text":"<ul> <li>Windowing: Applying a window function to truncate the ideal impulse response.</li> <li>Effect: Reduces Gibbs phenomenon but widens the transition band.</li> </ul>"},{"location":"questions/digital/digital-filters/#9-how-do-quantization-effects-impact-the-performance-of-digital-filters-in-hardware-implementations","title":"9. How do quantization effects impact the performance of digital filters in hardware implementations?","text":"<ul> <li>Coefficient Quantization: Alters filter response due to rounding errors.</li> <li>Data Quantization: Limits dynamic range and introduces noise.</li> </ul>"},{"location":"questions/digital/digital-filters/#10-what-is-a-cic-filter-and-what-are-its-key-characteristics","title":"10. What is a CIC filter, and what are its key characteristics?","text":"<ul> <li>CIC (Cascaded Integrator-Comb): An efficient filter for decimation and interpolation.</li> <li>Characteristics: No multipliers, simple hardware, high decimation/interpolation ratios, passband droop.</li> </ul>"},{"location":"questions/digital/digital-filters/#11-how-are-cic-filters-implemented-in-hardware-and-what-are-their-advantages","title":"11. How are CIC filters implemented in hardware, and what are their advantages?","text":"<ul> <li>Implementation: Cascaded integrators followed by cascaded combs, with downsampling between stages.</li> <li>Advantages: Simple hardware, no multipliers, efficient for high-speed applications.</li> </ul>"},{"location":"questions/digital/digital-filters/#12-explain-the-droop-characteristic-of-cic-filters-and-how-it-can-be-compensated","title":"12. Explain the droop characteristic of CIC filters and how it can be compensated.","text":"<ul> <li>Droop: Attenuation in high frequencies of the passband.</li> <li>Compensation: Using a separate FIR or sinc compensation filter.</li> </ul>"},{"location":"questions/digital/digital-filters/#fpga-asic-implementation-considerations","title":"FPGA &amp; ASIC Implementation Considerations","text":""},{"location":"questions/digital/digital-filters/#13-what-considerations-are-necessary-when-implementing-a-digital-filter-in-an-fpga-or-asic","title":"13. What considerations are necessary when implementing a digital filter in an FPGA or ASIC?","text":"<ul> <li>Resource utilization (multipliers, adders, memory).</li> <li>Timing constraints and clock speeds.</li> <li>Power consumption and efficiency.</li> <li>Quantization effects and arithmetic precision.</li> </ul>"},{"location":"questions/digital/digital-filters/#14-how-do-you-analyze-and-design-a-filter-to-meet-specific-passband-and-stopband-requirements","title":"14. How do you analyze and design a filter to meet specific passband and stopband requirements?","text":"<ul> <li>Define cutoff frequencies, passband ripple, and stopband attenuation.</li> <li>Choose FIR or IIR filter type.</li> <li>Use MATLAB, Python, or EDA tools to determine coefficients.</li> <li>Simulate and verify performance before hardware implementation.</li> </ul>"},{"location":"questions/digital/digital-filters/#15-what-are-the-effects-of-finite-word-length-on-filter-coefficients-and-data-values","title":"15. What are the effects of finite word length on filter coefficients and data values?","text":"<ul> <li>Coefficient Quantization: Alters frequency response.</li> <li>Data Quantization: Introduces noise and limits precision.</li> </ul>"},{"location":"questions/digital/digital-filters/#16-how-do-you-determine-the-stability-of-an-iir-filter-in-a-hardware-implementation","title":"16. How do you determine the stability of an IIR filter in a hardware implementation?","text":"<ul> <li>Check poles in the z-plane (all must be inside the unit circle).</li> <li>Simulate the filter response to observe behavior.</li> </ul>"},{"location":"questions/digital/digital-filters/#17-what-is-the-difference-between-direct-form-and-transposed-form-implementations-of-fir-and-iir-filters","title":"17. What is the difference between direct form and transposed form implementations of FIR and IIR filters?","text":"<ul> <li>Direct Form: Implements the difference equation directly.</li> <li>Transposed Form: Reverses signal flow, improving numerical stability in fixed-point implementations.</li> </ul>"},{"location":"questions/digital/digital-filters/#18-how-do-you-design-a-multi-rate-filter-system-using-cic-filters","title":"18. How do you design a multi-rate filter system using CIC filters?","text":"<ul> <li>Use CIC filters for decimation and interpolation.</li> <li>Apply compensation filters to correct droop.</li> <li>Optimize the number of stages to balance resource usage and performance.</li> </ul>"},{"location":"questions/digital/logic-design/","title":"RTL Logic Design Interview Questions and Answers","text":""},{"location":"questions/digital/logic-design/#1-what-is-rtl-register-transfer-level","title":"1. What is RTL (Register Transfer Level)?","text":"<p>RTL (Register Transfer Level) is an abstraction used in digital design that represents a circuit in terms of data flow and control at the register level. It describes how data moves between registers and how the control logic influences this movement.</p>"},{"location":"questions/digital/logic-design/#2-what-are-the-key-stages-in-an-rtl-design-flow","title":"2. What are the key stages in an RTL design flow?","text":"<p>The key stages in an RTL design flow include:</p> <ul> <li>Specification: Define functional and performance requirements.</li> <li>RTL Coding: Implement the design using Verilog or VHDL.</li> <li>Functional Verification: Check the correctness using simulation.</li> <li>Synthesis: Convert RTL to gate-level netlist.</li> <li>Static Timing Analysis (STA): Ensure timing constraints are met.</li> <li>Formal Verification: Compare RTL with synthesized netlist.</li> <li>Place and Route (P&amp;R): Map the design to physical layout.</li> <li>Signoff and Fabrication: Final verification and manufacturing.</li> </ul>"},{"location":"questions/digital/logic-design/#3-what-are-the-major-differences-between-combinational-and-sequential-circuits","title":"3. What are the major differences between combinational and sequential circuits?","text":"<ul> <li>Combinational Circuits: Output depends only on current inputs (e.g., adders, multiplexers).</li> <li>Sequential Circuits: Output depends on current inputs and previous states (e.g., registers, FSMs).</li> <li>Clock Dependency: Sequential circuits require a clock signal, while combinational circuits do not.</li> </ul>"},{"location":"questions/digital/logic-design/#4-explain-the-concept-of-pipelining-in-rtl-design","title":"4. Explain the concept of pipelining in RTL design.","text":"<p>Pipelining is a technique used to improve throughput by breaking a computation into multiple stages, where each stage processes part of the computation in parallel. This helps achieve higher clock frequencies by reducing logic depth per cycle.</p>"},{"location":"questions/digital/logic-design/#5-what-is-the-difference-between-blocking-and-non-blocking-assignments-in-verilog","title":"5. What is the difference between blocking and non-blocking assignments in Verilog?","text":"<ul> <li>Blocking (<code>=</code>): Executes sequentially in procedural blocks.</li> <li>Non-blocking (<code>&lt;=</code>): Executes in parallel, mainly used in sequential logic.</li> </ul>"},{"location":"questions/digital/logic-design/#example","title":"Example:","text":"<p><pre><code>always @(posedge clk) begin\n    a = b;  // Blocking assignment\n    c &lt;= d; // Non-blocking assignment\nend\n</code></pre> Non-blocking assignments prevent race conditions in sequential logic.</p>"},{"location":"questions/digital/logic-design/#6-how-does-a-latch-differ-from-a-flip-flop-in-rtl-design","title":"6. How does a latch differ from a flip-flop in RTL design?","text":"<ul> <li>Latch: Level-sensitive, changes state when the enable signal is active.</li> <li>Flip-Flop: Edge-triggered, updates state only on clock edges.</li> <li>Latches can introduce timing hazards, while flip-flops provide better timing control.</li> </ul>"},{"location":"questions/digital/logic-design/#7-what-is-the-setup-and-hold-time-in-sequential-circuits","title":"7. What is the setup and hold time in sequential circuits?","text":"<ul> <li>Setup Time: Minimum time the data must be stable before the clock edge.</li> <li>Hold Time: Minimum time the data must remain stable after the clock edge.</li> <li>Violations can cause metastability, leading to unpredictable circuit behavior.</li> </ul>"},{"location":"questions/digital/logic-design/#8-what-is-metastability-and-its-effects-in-rtl-design","title":"8. What is metastability and its effects in RTL design?","text":"<p>Metastability occurs when a flip-flop receives data near the clock transition, causing an undefined or unstable output. It can be mitigated using synchronizers for clock domain crossings.</p>"},{"location":"questions/digital/logic-design/#9-how-do-you-ensure-glitch-free-logic-in-rtl-design","title":"9. How do you ensure glitch-free logic in RTL design?","text":"<ul> <li>Avoid combinational feedback loops.</li> <li>Use registered outputs instead of combinational paths.</li> <li>Minimize logic hazards using proper constraints-based synthesis.</li> </ul>"},{"location":"questions/digital/logic-design/#10-what-is-clock-gating-and-how-does-it-help-in-low-power-design","title":"10. What is clock gating, and how does it help in low-power design?","text":"<p>Clock gating is a technique used to disable the clock signal to inactive logic blocks to reduce dynamic power consumption. It helps in reducing unnecessary toggling of registers.</p>"},{"location":"questions/digital/logic-design/#11-what-is-the-difference-between-synchronous-and-asynchronous-reset","title":"11. What is the difference between synchronous and asynchronous reset?","text":"<ul> <li>Synchronous Reset: Reset is sampled only on the clock edge.</li> <li>Asynchronous Reset: Reset is applied immediately, independent of the clock.</li> <li>Synchronous reset is preferred for better timing control.</li> </ul>"},{"location":"questions/digital/logic-design/#12-what-are-timing-violations-and-how-do-you-fix-them","title":"12. What are timing violations, and how do you fix them?","text":"<ul> <li>Setup Violation: Data is not stable before the clock edge.</li> <li>Hold Violation: Data changes too soon after the clock edge.</li> <li>Fixes: Optimize clock skew, improve setup/hold margins, use retiming techniques.</li> </ul>"},{"location":"questions/digital/logic-design/#13-how-do-you-implement-an-fsm-finite-state-machine-in-rtl","title":"13. How do you implement an FSM (Finite State Machine) in RTL?","text":"<p>FSMs can be implemented using <code>case</code> statements in Verilog: <pre><code>always @(posedge clk) begin\n    case (state)\n        IDLE: if (start) state &lt;= RUN;\n        RUN: if (stop) state &lt;= IDLE;\n    endcase\nend\n</code></pre></p>"},{"location":"questions/digital/logic-design/#14-what-are-the-different-types-of-fsms-mealy-vs-moore","title":"14. What are the different types of FSMs (Mealy vs. Moore)?","text":"<ul> <li>Moore FSM: Outputs depend only on the current state.</li> <li>Mealy FSM: Outputs depend on the current state and inputs.</li> </ul>"},{"location":"questions/digital/logic-design/#15-how-do-you-design-a-priority-encoder-in-rtl","title":"15. How do you design a priority encoder in RTL?","text":"<p>A priority encoder outputs the highest-priority active input: <pre><code>always @(*) begin\n    casez (in)\n        4'b1???: out = 2'b11;\n        4'b01??: out = 2'b10;\n        4'b001?: out = 2'b01;\n        4'b0001: out = 2'b00;\n        default: out = 2'bxx;\n    endcase\nend\n</code></pre></p>"},{"location":"questions/digital/logic-design/#16-what-are-the-different-types-of-adders-used-in-rtl","title":"16. What are the different types of adders used in RTL?","text":"<ul> <li>Ripple Carry Adder: Simple but slow.</li> <li>Carry Lookahead Adder: Faster carry computation.</li> <li>Carry Save Adder: Used in multipliers.</li> </ul>"},{"location":"questions/digital/logic-design/#17-explain-the-concept-of-clock-domain-crossing-cdc-in-rtl-design","title":"17. Explain the concept of clock domain crossing (CDC) in RTL design.","text":"<p>CDC occurs when signals transfer between different clock domains, requiring synchronization techniques such as double-flop synchronizers or FIFOs.</p>"},{"location":"questions/digital/logic-design/#18-how-do-you-handle-multi-cycle-paths-in-rtl-design","title":"18. How do you handle multi-cycle paths in RTL design?","text":"<ul> <li>Specify constraints for multi-cycle paths in timing analysis.</li> <li>Use pipeline registers to balance delays.</li> </ul>"},{"location":"questions/digital/logic-design/#19-what-is-retiming-and-how-does-it-help-improve-performance","title":"19. What is retiming, and how does it help improve performance?","text":"<p>Retiming is a technique where registers are moved across logic gates to balance delays and improve timing performance.</p>"},{"location":"questions/digital/logic-design/#20-how-do-you-ensure-a-race-free-design-in-rtl-coding","title":"20. How do you ensure a race-free design in RTL coding?","text":"<ul> <li>Use non-blocking assignments for sequential logic.</li> <li>Avoid logic loops and race-prone combinational circuits.</li> </ul>"},{"location":"questions/digital/logic-design/#21-what-is-the-significance-of-asynchronous-fifo-in-rtl-design","title":"21. What is the significance of asynchronous FIFO in RTL design?","text":"<p>Asynchronous FIFOs help in clock domain crossings, buffering data safely between two different clock domains.</p>"},{"location":"questions/digital/logic-design/#22-explain-how-a-multiplexer-mux-is-implemented-in-rtl","title":"22. Explain how a multiplexer (MUX) is implemented in RTL.","text":"<p>A 4-to-1 multiplexer in Verilog: <pre><code>assign out = sel[1] ? (sel[0] ? d3 : d2) : (sel[0] ? d1 : d0);\n</code></pre></p>"},{"location":"questions/digital/logic-design/#23-how-do-you-optimize-area-and-power-in-rtl-design","title":"23. How do you optimize area and power in RTL design?","text":"<ul> <li>Reduce logic duplication.</li> <li>Use clock gating and power gating.</li> <li>Minimize unnecessary switching activity.</li> </ul>"},{"location":"questions/digital/logic-design/#24-what-are-the-considerations-for-rtl-power-estimation","title":"24. What are the considerations for RTL power estimation?","text":"<ul> <li>Switching activity.</li> <li>Glitch analysis.</li> <li>Clock and data gating techniques.</li> </ul>"},{"location":"questions/digital/logic-design/#25-how-do-you-verify-an-rtl-design-before-synthesis","title":"25. How do you verify an RTL design before synthesis?","text":"<ul> <li>Run functional simulations.</li> <li>Perform lint checks for coding violations.</li> <li>Apply formal verification for correctness.</li> <li>Run power and timing analysis.</li> </ul>"}]}